Author: Jan Christoph Ebersbach <jceb@e-jc.de>
URL: http://dwm.suckless.org/patches/single_tagset
This patch addresses the multi-monitor setup. Instead of having separate tags
for every monitor there is just one list of tags for all monitors. Instead of
moving windows from one monitor to the other, the desired tag from the
other monitor can just be selected and all windows will be drawn on the
current monitor.

Several deep changes needed to be made:
1. Macro ISVISIBLE expects a second parameter, the monitor
2. Monitor->clients and Monitor->stack were moved to the global variable
   Clientlist cl. All monitors refer to this one list.
3. A new method attachclients was added. When changing between tags this
   function ensures that all clients are pointing to the right monitor.

Please be aware that this patch probably breaks any other patch!

Index: dwm/dwm.c
===================================================================
--- dwm/dwm.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/dwm.c	2014-01-25 21:13:00.000000000 +0100
@@ -48,7 +48,7 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
+#define ISVISIBLE(C, M)         ((C->tags & M->tagset[M->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -112,6 +112,7 @@
 } Layout;
 
 typedef struct Pertag Pertag;
+typedef struct Clientlist Clientlist;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -125,9 +126,8 @@
 	unsigned int tagset[2];
 	Bool showbar;
 	Bool topbar;
-	Client *clients;
+	Clientlist *cl;
 	Client *sel;
-	Client *stack;
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
@@ -143,6 +143,11 @@
 	int monitor;
 } Rule;
 
+struct Clientlist {
+	Client *clients;
+	Client *stack;
+};
+
 /* function declarations */
 static void applyrules(Client *c);
 static Bool applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact);
@@ -150,6 +155,7 @@
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
 static void attachabove(Client *c);
+static void attachclients(Monitor *m);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -187,7 +193,7 @@
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
-static Client *nexttiled(Client *c);
+static Client *nexttiled(Client *c, Monitor *m);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
@@ -273,6 +279,7 @@
 static Fnt *fnt;
 static Monitor *mons, *selmon;
 static Window root;
+static Clientlist *cl;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -313,7 +320,7 @@
 		{
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
-			for(m = mons; m && m->num != r->monitor; m = m->next);
+			for(m = mons; m && (m->tagset[m->seltags] & c->tags) == 0; m = m->next) ;
 			if(m)
 				c->mon = m;
 		}
@@ -394,9 +401,9 @@
 void
 arrange(Monitor *m) {
 	if(m)
-		showhide(m->stack);
+		showhide(m->cl->stack);
 	else for(m = mons; m; m = m->next)
-		showhide(m->stack);
+		showhide(m->cl->stack);
 	if(m) {
 		arrangemon(m);
 		restack(m);
@@ -413,27 +420,60 @@
 
 void
 attach(Client *c) {
-	c->next = c->mon->clients;
-	c->mon->clients = c;
+	c->next = c->mon->cl->clients;
+	c->mon->cl->clients = c;
 }
 
 void
 attachabove(Client *c) {
-	if(c->mon->sel == NULL || c->mon->sel == c->mon->clients || c->mon->sel->isfloating) {
+	if(c->mon->sel == NULL || c->mon->sel == c->mon->cl->clients || c->mon->sel->isfloating) {
 		attach(c);
 		return;
 	}
 
 	Client *at;
-	for(at = c->mon->clients; at->next != c->mon->sel; at = at->next);
+	for(at = c->mon->cl->clients; at->next != c->mon->sel; at = at->next);
 	c->next = at->next;
 	at->next = c;
 }
 
 void
+attachclients(Monitor *m) {
+	/* attach clients to the specified monitor */
+	Monitor *tm;
+	Client *c;
+	unsigned int utags = 0;
+	Bool rmons = False;
+	if(!m)
+		return;
+
+	/* collect information about the tags in use */
+	for(tm = mons; tm; tm = tm->next)
+		if(tm != m)
+			utags |= m->tagset[m->seltags];
+
+	for(c = m->cl->clients; c; c = c->next)
+		if(ISVISIBLE(c, m)) {
+			/* if client is also visible on other tags that are displayed on
+			 * other monitors, remove these tags */
+			if(c->tags & utags) {
+				c->tags = c->tags & m->tagset[m->seltags];
+				rmons = True;
+			}
+			unfocus(c, True);
+			c->mon = m;
+		}
+
+	if(rmons)
+		for(tm = mons; tm; tm = tm->next)
+			if(tm != m)
+				arrange(tm);
+}
+
+void
 attachstack(Client *c) {
-	c->snext = c->mon->stack;
-	c->mon->stack = c;
+	c->snext = c->mon->cl->stack;
+	c->mon->cl->stack = c;
 }
 
 void
@@ -496,8 +536,8 @@
 	view(&a);
 	selmon->lt[selmon->sellt] = &foo;
 	for(m = mons; m; m = m->next)
-		while(m->stack)
-			unmanage(m->stack, False);
+		while(m->cl->stack)
+			unmanage(m->cl->stack, False);
 	XUngrabKey(dpy, AnyKey, AnyModifier, root);
 	while(mons)
 		cleanupmon(mons);
@@ -558,7 +598,7 @@
 			              || (cme->data.l[0] == 2 /* _NET_WM_STATE_TOGGLE */ && !c->isfullscreen)));
 	}
 	else if(cme->message_type == netatom[NetActiveWindow]) {
-		if(!ISVISIBLE(c)) {
+		if(!ISVISIBLE(c, c->mon)) {
 			c->mon->seltags ^= 1;
 			c->mon->tagset[c->mon->seltags] = c->tags;
 			for(i=0; !(c->tags & 1 << i); i++);
@@ -642,7 +682,7 @@
 				c->y = m->my + (m->mh / 2 - HEIGHT(c) / 2); /* center in y direction */
 			if((ev->value_mask & (CWX|CWY)) && !(ev->value_mask & (CWWidth|CWHeight)))
 				configure(c);
-			if(ISVISIBLE(c))
+			if(ISVISIBLE(c, m))
 				XMoveResizeWindow(dpy, c->win, c->x, c->y, c->w, c->h);
 		}
 		else
@@ -663,12 +703,18 @@
 
 Monitor *
 createmon(void) {
-	Monitor *m;
+	Monitor *m, *tm;
 	int i;
 
 	if(!(m = (Monitor *)calloc(1, sizeof(Monitor))))
 		die("fatal: could not malloc() %u bytes\n", sizeof(Monitor));
-	m->tagset[0] = m->tagset[1] = 1;
+	m->cl = cl;
+	/* reassing tags when creating a new monitor */
+	for(i=1, tm = mons; tm; tm = tm->next, i++) {
+		tm->seltags ^= 1;
+		tm->tagset[tm->seltags] = i;
+	}
+	m->tagset[0] = m->tagset[1] = i;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -713,7 +759,7 @@
 detach(Client *c) {
 	Client **tc;
 
-	for(tc = &c->mon->clients; *tc && *tc != c; tc = &(*tc)->next);
+	for(tc = &c->mon->cl->clients; *tc && *tc != c; tc = &(*tc)->next);
 	*tc = c->next;
 }
 
@@ -721,11 +767,11 @@
 detachstack(Client *c) {
 	Client **tc, *t;
 
-	for(tc = &c->mon->stack; *tc && *tc != c; tc = &(*tc)->snext);
+	for(tc = &c->mon->cl->stack; *tc && *tc != c; tc = &(*tc)->snext);
 	*tc = c->snext;
 
 	if(c == c->mon->sel) {
-		for(t = c->mon->stack; t && !ISVISIBLE(t); t = t->snext);
+		for(t = c->mon->cl->stack; t && !ISVISIBLE(t, c->mon); t = t->snext);
 		c->mon->sel = t;
 	}
 }
@@ -751,7 +797,7 @@
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
-	for(c = m->clients; c; c = c->next) {
+	for(c = m->cl->clients; c; c = c->next) {
 		occ |= c->tags;
 		if(c->isurgent)
 			urg |= c->tags;
@@ -830,8 +876,8 @@
 
 void
 focus(Client *c) {
-	if(!c || !ISVISIBLE(c))
-		for(c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
+	if(!c || !ISVISIBLE(c, selmon))
+		for(c = selmon->cl->stack; c && !ISVISIBLE(c, selmon); c = c->snext);
 	/* was if(selmon->sel) */
 	if(selmon->sel && selmon->sel != c)
 		unfocus(selmon->sel, False);
@@ -886,17 +932,17 @@
 	if(!selmon->sel)
 		return;
 	if(arg->i > 0) {
-		for(c = selmon->sel->next; c && !ISVISIBLE(c); c = c->next);
+		for(c = selmon->sel->next; c && !ISVISIBLE(c, selmon); c = c->next);
 		if(!c)
-			for(c = selmon->clients; c && !ISVISIBLE(c); c = c->next);
+			for(c = selmon->cl->clients; c && !ISVISIBLE(c, selmon); c = c->next);
 	}
 	else {
-		for(i = selmon->clients; i != selmon->sel; i = i->next)
-			if(ISVISIBLE(i))
+		for(i = selmon->cl->clients; i != selmon->sel; i = i->next)
+			if(ISVISIBLE(i, selmon))
 				c = i;
 		if(!c)
 			for(; i; i = i->next)
-				if(ISVISIBLE(i))
+				if(ISVISIBLE(i, selmon))
 					c = i;
 	}
 	if(c) {
@@ -1157,12 +1203,12 @@
 	unsigned int n = 0, r = 0;
 	Client *c;
 
-	for(c = m->clients; c; c = c->next)
-		if(ISVISIBLE(c))
+	for(c = m->cl->clients; c; c = c->next)
+		if(ISVISIBLE(c, m))
 			n++;
 	if(n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for(c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+	for(c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m)) {
 		/* remove border when in monocle layout */
 		if(c->bw) {
 			c->oldbw = c->bw;
@@ -1249,8 +1295,8 @@
 }
 
 Client *
-nexttiled(Client *c) {
-	for(; c && (c->isfloating || !ISVISIBLE(c)); c = c->next);
+nexttiled(Client *c, Monitor *m) {
+	for(; c && (c->isfloating || !ISVISIBLE(c, m)); c = c->next);
 	return c;
 }
 
@@ -1404,8 +1450,8 @@
 	if(m->lt[m->sellt]->arrange) {
 		wc.stack_mode = Below;
 		wc.sibling = m->barwin;
-		for(c = m->stack; c; c = c->snext)
-			if(!c->isfloating && ISVISIBLE(c)) {
+		for(c = m->cl->stack; c; c = c->snext)
+			if(!c->isfloating && ISVISIBLE(c, m)) {
 				XConfigureWindow(dpy, c->win, CWSibling|CWStackMode, &wc);
 				wc.sibling = c->win;
 			}
@@ -1455,11 +1501,9 @@
 	if(c->mon == m)
 		return;
 	unfocus(c, True);
-	detach(c);
 	detachstack(c);
 	c->mon = m;
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
-	attachabove(c);
 	attachstack(c);
 	focus(NULL);
 	arrange(NULL);
@@ -1580,6 +1624,8 @@
 	sw = DisplayWidth(dpy, screen);
 	sh = DisplayHeight(dpy, screen);
 	bh = fnt->h + 2;
+	if(!(cl = (Clientlist *)calloc(1, sizeof(Clientlist))))
+		die("fatal: could not malloc() %u bytes\n", sizeof(Clientlist));
 	drw = drw_create(dpy, screen, root, sw, sh);
 	drw_setfont(drw, fnt);
 	updategeom();
@@ -1630,7 +1676,7 @@
 showhide(Client *c) {
 	if(!c)
 		return;
-	if(ISVISIBLE(c)) { /* show clients top down */
+	if(ISVISIBLE(c, c->mon)) { /* show clients top down */
 		XMoveWindow(dpy, c->win, c->x, c->y);
 		if((!c->mon->lt[c->mon->sellt]->arrange || c->isfloating) && !c->isfullscreen)
 			resize(c, c->x, c->y, c->w, c->h, False);
@@ -1667,7 +1713,7 @@
 void
 swapfocus(){
 	Client *c;
-	for(c = selmon->clients; c && c != prevclient; c = c->next) ;
+	for(c = selmon->cl->clients; c && c != prevclient; c = c->next) ;
 	if(c == prevclient) {
 		focus(prevclient);
 		restack(prevclient->mon);
@@ -1676,7 +1722,22 @@
 
 void
 tag(const Arg *arg) {
+	Monitor *m;
+	unsigned int newtags;
 	if(selmon->sel && arg->ui & TAGMASK) {
+		newtags = arg->ui & TAGMASK;
+		for(m = mons; m; m = m->next)
+			/* if tag is visible on another monitor, move client to the new monitor */
+			if(m != selmon && m->tagset[m->seltags] & newtags) {
+				/* prevent moving client to all tags (MODKEY-Shift-0) when multiple monitors are connected */
+				if(newtags & selmon->tagset[selmon->seltags])
+					return;
+				selmon->sel->tags = newtags;
+				selmon->sel->mon = m;
+				arrange(m);
+				break;
+			}
+		/* workaround in case just one monitor is connected */
 		selmon->sel->tags = arg->ui & TAGMASK;
 		focus(NULL);
 		arrange(selmon);
@@ -1695,7 +1756,7 @@
 	unsigned int i, n, h, mw, my, ty, r;
 	Client *c;
 
-	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	for(n = 0, c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m), n++);
 	if(n == 0)
 		return;
 
@@ -1703,7 +1764,7 @@
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
 		mw = m->ww;
-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
+	for(i = my = ty = 0, c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m), i++, r = 0) {
 		if(n == 1) {
 			if (c->bw) {
 				/* remove border when only one window is on the current tag */
@@ -1776,12 +1837,17 @@
 
 void
 toggletag(const Arg *arg) {
+	Monitor *m;
 	unsigned int newtags;
 
 	if(!selmon->sel)
 		return;
 	newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
 	if(newtags) {
+		/* prevent adding tags that are in use on other monitors */
+		for(m = mons; m; m = m->next)
+			if(m != selmon && newtags & m->tagset[m->seltags])
+				return;
 		selmon->sel->tags = newtags;
 		focus(NULL);
 		arrange(selmon);
@@ -1790,10 +1856,15 @@
 
 void
 toggleview(const Arg *arg) {
+	Monitor *m;
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
 	int i;
 
 	if(newtagset) {
+		/* prevent displaying the same tags on multiple monitors */
+		for(m = mons; m; m = m->next)
+			if(m != selmon && newtagset & m->tagset[m->seltags])
+				return;
 		if(newtagset == ~0) {
 			selmon->pertag->prevtag = selmon->pertag->curtag;
 			selmon->pertag->curtag = 0;
@@ -1812,6 +1883,7 @@
 		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
 		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
 		selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+		attachclients(selmon);
 		if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
 			togglebar(NULL);
 		focus(NULL);
@@ -1909,7 +1981,7 @@
 
 	XDeleteProperty(dpy, root, netatom[NetClientList]);
 	for(m = mons; m; m = m->next)
-		for(c = m->clients; c; c = c->next)
+		for(c = m->cl->clients; c; c = c->next)
 			XChangeProperty(dpy, root, netatom[NetClientList],
 			                XA_WINDOW, 32, PropModeAppend,
 			                (unsigned char *) &(c->win), 1);
@@ -1939,8 +2011,10 @@
 		if(n <= nn) {
 			for(i = 0; i < (nn - n); i++) { /* new monitors available */
 				for(m = mons; m && m->next; m = m->next);
-				if(m)
+				if(m) {
 					m->next = createmon();
+					attachclients(m->next);
+				}
 				else
 					mons = createmon();
 			}
@@ -1961,17 +2035,13 @@
 		else { /* less monitors available nn < n */
 			for(i = nn; i < n; i++) {
 				for(m = mons; m && m->next; m = m->next);
-				while(m->clients) {
-					dirty = True;
-					c = m->clients;
-					m->clients = c->next;
-					detachstack(c);
-					c->mon = mons;
-					attachabove(c);
-					attachstack(c);
-				}
 				if(m == selmon)
 					selmon = mons;
+				for(c = m->cl->clients; c; c = c->next) {
+					dirty = True;
+					if(c->mon == m)
+						c->mon = selmon;
+				}
 				cleanupmon(m);
 			}
 		}
@@ -2111,11 +2181,30 @@
 
 void
 view(const Arg *arg) {
+	Monitor *m;
+	unsigned int newtagset = selmon->tagset[selmon->seltags ^ 1];
 	int i;
 	unsigned int tmptag;
 
 	if((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
+
+	/* swap tags when trying to display a tag from another monitor */
+	if(arg->ui & TAGMASK)
+		newtagset = arg->ui & TAGMASK;
+	for(m = mons; m; m = m->next)
+		if(m != selmon && newtagset & m->tagset[m->seltags]) {
+			/* prevent displaying all tags (MODKEY-0) when multiple monitors
+			 * are connected */
+			if(newtagset & selmon->tagset[selmon->seltags])
+				return;
+			m->seltags ^= 1;
+			m->tagset[m->seltags] = selmon->tagset[selmon->seltags];
+			attachclients(m);
+			arrange(m);
+			break;
+		}
+
 	selmon->seltags ^= 1; /* toggle sel tagset */
 	if(arg->ui & TAGMASK) {
 		selmon->pertag->prevtag = selmon->pertag->curtag;
@@ -2136,6 +2225,7 @@
 	selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
 	selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
 	selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+	attachclients(selmon);
 	if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
 		togglebar(NULL);
 	focus(NULL);
@@ -2148,7 +2238,7 @@
 	Monitor *m;
 
 	for(m = mons; m; m = m->next)
-		for(c = m->clients; c; c = c->next)
+		for(c = m->cl->clients; c; c = c->next)
 			if(c->win == w)
 				return c;
 	return NULL;
@@ -2206,24 +2296,24 @@
 void
 zoom(const Arg *arg) {
 	Client *c = selmon->sel;
-	prevclient = nexttiled(selmon->clients);
+	prevclient = nexttiled(selmon->cl->clients, selmon);
 	Client *at = NULL, *cold, *cprevious = NULL;
 
 	if(!selmon->lt[selmon->sellt]->arrange
 	|| (selmon->sel && selmon->sel->isfloating))
 		return;
-	if(c == nexttiled(selmon->clients)) {
+	if(c == nexttiled(selmon->cl->clients, selmon)) {
 		at = findbefore(selmon->pertag->prevzooms[selmon->pertag->curtag]);
 		if(at)
-			cprevious = nexttiled(at->next);
+			cprevious = nexttiled(at->next, selmon);
 		if(!cprevious || cprevious != selmon->pertag->prevzooms[selmon->pertag->curtag]) {
 			selmon->pertag->prevzooms[selmon->pertag->curtag] = NULL;
-			if(!c || !(c = prevclient = nexttiled(c->next)))
+			if(!c || !(c = prevclient = nexttiled(c->next, selmon)))
 				return;
 		} else
 			c = cprevious;
 	}
-	cold = nexttiled(selmon->clients);
+	cold = nexttiled(selmon->cl->clients, selmon);
 	if(c != cold && !at)
 		at = findbefore(c);
 	detach(c);
Index: dwm/focusmaster.c
===================================================================
--- dwm/focusmaster.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/focusmaster.c	2014-01-25 21:12:45.714345397 +0100
@@ -1,4 +1,4 @@
 static void
 focusmaster(const Arg *arg) {
-	focus(nexttiled(selmon->clients));
+	focus(nexttiled(selmon->cl->clients, selmon));
 }
Index: dwm/gaplessgrid.c
===================================================================
--- dwm/gaplessgrid.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/gaplessgrid.c	2014-01-25 21:12:45.714345397 +0100
@@ -3,7 +3,7 @@
 	unsigned int n, cols, rows, cn, rn, i, cx, cy, cw, ch;
 	Client *c;
 
-	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++) ;
+	for(n = 0, c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m), n++) ;
 	if(n == 0)
 		return;
 
@@ -19,7 +19,7 @@
 	cw = cols ? m->ww / cols : m->ww;
 	cn = 0; /* current column number */
 	rn = 0; /* current row number */
-	for(i = 0, c = nexttiled(m->clients); c; i++, c = nexttiled(c->next)) {
+	for(i = 0, c = nexttiled(m->cl->clients, m); c; i++, c = nexttiled(c->next, m)) {
 		if(i/rows + 1 > cols - n%cols)
 			rows = n/cols + 1;
 		ch = rows ? m->wh / rows : m->wh;
Index: dwm/push.c
===================================================================
--- dwm/push.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/push.c	2014-01-25 21:12:45.714345397 +0100
@@ -2,8 +2,8 @@
 prevtiled(Client *c) {
 	Client *p, *r;
 
-	for(p = selmon->clients, r = NULL; p && p != c; p = p->next)
-		if(!p->isfloating && ISVISIBLE(p))
+	for(p = selmon->cl->clients, r = NULL; p && p != c; p = p->next)
+		if(!p->isfloating && ISVISIBLE(p, selmon))
 			r = p;
 	return r;
 }
@@ -19,10 +19,10 @@
 		/* attach before c */
 		detach(sel);
 		sel->next = c;
-		if(selmon->clients == c)
-			selmon->clients = sel;
+		if(selmon->cl->clients == c)
+			selmon->cl->clients = sel;
 		else {
-			for(c = selmon->clients; c->next != sel->next; c = c->next);
+			for(c = selmon->cl->clients; c->next != sel->next; c = c->next);
 			c->next = sel;
 		}
 	} else {
@@ -43,7 +43,7 @@
 
 	if(!sel || sel->isfloating)
 		return;
-	if((c = nexttiled(sel->next))) {
+	if((c = nexttiled(sel->next, selmon))) {
 		/* attach after c */
 		detach(sel);
 		sel->next = c->next;
Index: dwm/tagall.c
===================================================================
--- dwm/tagall.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/tagall.c	2014-01-25 21:12:45.714345397 +0100
@@ -1,6 +1,6 @@
 void
 tagall(const Arg *arg) {
-	if (!selmon->clients)
+	if (!selmon->cl->clients)
 		return;
 	/* if parameter starts with F, just move floating windows */
 	int floating_only = (char *)arg->v && ((char *)arg->v)[0] == 'F' ? 1 : 0;
@@ -8,7 +8,7 @@
 	int j;
 	Client* c;
 	if(tag >= 0 && tag < LENGTH(tags))
-		for(c = selmon->clients; c; c = c->next)
+		for(c = selmon->cl->clients; c; c = c->next)
 		{
 			if(!floating_only || c->isfloating)
 				for(j = 0; j < LENGTH(tags); j++)
Index: dwm/toggleview_focus.c
===================================================================
--- dwm/toggleview_focus.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/toggleview_focus.c	2014-01-25 21:12:45.718345397 +0100
@@ -1,7 +1,7 @@
 static void toggleview_focus(const Arg *arg) {
 	Client *c;
 	toggleview(arg);
-	for(c = selmon->clients; !(c->tags & arg->ui) && c->next; c = c->next) ;
+	for(c = selmon->cl->clients; !(c->tags & arg->ui) && c->next; c = c->next) ;
 	if(c && c->tags & arg->ui)
 		focus(c);
 }
Index: dwm/zoomswap.c
===================================================================
--- dwm/zoomswap.c.orig	2014-01-25 21:12:45.722345397 +0100
+++ dwm/zoomswap.c	2014-01-25 21:12:45.718345397 +0100
@@ -3,8 +3,8 @@
 Client *
 findbefore(Client *c) {
 	Client *tmp;
-	if(c == selmon->clients)
+	if(c == selmon->cl->clients)
 		return NULL;
-	for(tmp = selmon->clients; tmp && tmp->next != c; tmp = tmp->next) ;
+	for(tmp = selmon->cl->clients; tmp && tmp->next != c; tmp = tmp->next) ;
 	return tmp;
 }
